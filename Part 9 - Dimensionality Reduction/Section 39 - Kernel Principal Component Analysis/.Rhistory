summary(regressor)$coefficients[,0,4]
for(r in summary(regressor)$coefficients[,0..4])
print(r)
for(r in summary(regressor)$coefficients[,0:4])
print(r)
for(r in summary(regressor)$coefficients(c[0,4]))
print(r)
summary(regressor)$coefficients[,0]
to_string(summary(regressor)$coefficients[,0])
to_char(summary(regressor)$coefficients[,0])
text(summary(regressor)$coefficients[,0])
columns <- (summary(regressor)$coefficients[,0])
columns
View(columns)
View(columns)
View(columns)
View(columns)
factor(columns)
columns
View(columns)
rm(columns)
for(r in summary(regressor)$coefficients[,0])
print(r)
summary(regressor)$coefficients[,0]
for(r in summary(regressor)$coefficients){
if(r[,4] > 0.05) {
columns = summary(regressor)$coefficients[,0]
print(columns)
} else {
}
}
for(r in summary(regressor)$coefficients){
if(summary(regressor)$coefficients[,4] > 0.05) {
columns = summary(regressor)$coefficients[,0]
print(columns)
} else {
}
}
for(r in summary(regressor)$coefficients){
if(summary(regressor)$coefficients[,4] > 0.05) {
summary(regressor)$coefficients[,0]
} else {
}
}
summary(regressor)$coefficients[,0]
column = to_factor(summary(regressor)$coefficients[,0])
column = to.factor(summary(regressor)$coefficients[,0])
column = factor(summary(regressor)$coefficients[,0])
column
column = factor(summary(regressor)$coefficients[,0],labels = c(summary(regressor)$coefficients[,0]))
rm(column)
factor(summary(regressor)$coefficients[,0],
labels = c(summary(regressor)$coefficients[,0]))
c(summary(regressor)$coefficients[,0])
summary(regressor)$coefficients[,0])
summary(regressor)$coefficients[,0]
factor(summary(regressor)$coefficients[,0],
labels = c(summary(regressor)$coefficients[,0]))
factor(summary(regressor)$coefficients[,0],
labels = c(summary(regressor)$coefficients[,0]))
string(summary(regressor)$coefficients[,0])
text(summary(regressor)$coefficients[,0])
summary(regressor)$coefficients[,0]
toString(summary(regressor)$coefficients[,0])
s <- toString(summary(regressor)$coefficients[,0])
rm(s)
data.frame(unclass(summary(regressor)$coefficients[,0]))
s <- data.frame(unclass(summary(regressor)$coefficients[,0]))
View(s)
s
View(s)
unclass(summary(regressor)$coefficients[,0])
toString(unclass(summary(regressor)$coefficients[,0]))
data.frame(unclass(summary(regressor)$coefficients[,0]))
s <- as.data.frame(unclass(summary(regressor)$coefficients[,0]))
s
View(s)
View(s)
View(s)
s <- data.frame(unclass(summary(regressor)$coefficients[,0]))
View(s)
text(summary(regressor)$coefficients[,0])
data.frame(unclass(summary(regressor)$coefficients[,0])
data.frame(unclass(summary(regressor)$coefficients[,0]))
View(data.frame(unclass(summary(regressor)$coefficients[,0])))
View(data.frame(unclass(summary(regressor)))
View(data.frame(unclass(summary(regressor))))
View(data.frame(unclass(summary(regressor))))
unclass(summary(regressor)
unclass(summary(regressor))
unclass(summary(regressor)$coefficients[,0])
View(data.frame(unclass(summary(regressor)$coefficients[,0])))
cbind(s,coef)
cbind(s,coeff)
colnames(s) <- c("coefficients")
s <- data.frame(matrix(ncol = 1, nrow = 0))
colnames(s) <- c("coefficients")
View(s)
s <- data.frame(unclass(summary(regressor)$coefficients[,0]))
View(s)
rm
rm(s)
s <- data.frame(matrix(ncol = 1, nrow = 0))
colnames(s) <- c("coefficients")
View(s)
rbind(s,unclass(summary(regressor)$coefficients[,0]))
View(s)
add_row(s,unclass(summary(regressor)$coefficients[,0]))
r <- data.frame(unclass(summary(regressor)$coefficients[,0]))
View(r)
r_bind(s,r)
rbind(s,r)
View(r)
View(s)
unclass(summary(regressor)$coefficients[,0])
data.frame(summary(regressor)$coefficients[,0])
r$rows <- data.frame(summary(regressor)$coefficients[,0])
View(r)
r <- data.frame(summary(regressor)$coefficients[,0])
View(r)
r <- rbind(s,summary(regressor)$coefficients[,0])
View(r)
summary(regressor)$coefficients[,0]
coefficients(regressor)
library(car)
install.packages("car")
library(car)
rm(r)
rm(s)
subsets(regressor, statistic="rsq")
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend,
data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Marketing.Spend,
data = dataset)
summary(regressor)
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(summary(regressor))
}
SL = 0.05
dataset = dataset[, c(1,2,3,4,5)]
backwardElimination(training_set, SL)
setwd("~/Desktop/Machine_Learning_Algorithms_R/Part 8 - Deep Learning/Section 37 - Principal Component Analysis")
dataset <- read.csv('Wine.csv')
View(dataset)
# Importing the dataset
dataset = read.csv('Wine.csv')
library(caTools) #used for splitting the dataset
set.seed(123)
split = sample.split(dataset$Customer_Segment, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
training_set[-14] = scale(training_set[-14])
test_set[-14] = scale(test_set[-14])
View(test_set)
View(training_set)
install.packages('caret')
install.packages('e1071')
library(caret)
library(e1071)
pca = preProcess(x = training_set,
method = 'pca',
pcaComp = 2
)
training_set = predict(pca, training_set)
View(training_set)
View(training_set)
set.seed(123)
split = sample.split(dataset$Customer_Segment, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
training_set[-14] = scale(training_set[-14])
test_set[-14] = scale(test_set[-14])
pca = preProcess(x = training_set[-14],
method = 'pca',
pcaComp = 2)
training_set = predict(pca, training_set)
View(training_set)
View(training_set)
training_set = training_set[c(2,3,1)]
View(training_set)
test_set = predict(pca, test_set)
test_set = test_set[c(2,3,1)]
View(test_set)
classifier = glm(formula = Customer_Segment ~ .,
family = binomial,
data = training_set)
classifier = glm(formula = Customer_Segment ~ .,
data = training_set)
prob_pred = predict(classifier, type = 'response', newdata = test_set[-3])
y_pred = ifelse(prob_pred > 0.5, 1, 0)
View(test_set)
y_pred
prob_pred = predict(classifier, type = 'response', newdata = test_set[-3])
prob_pred
classifier
prob_pred = predict(classifier, newdata = test_set[-3])
prob_pred = predict(classifier, newdata = test_set[-3])
prob_pred
y_pred = ifelse(prob_pred > 0.5, 1, 0)
cm = table(test_set[, 3], y_pred)
cm
y_pred = predict(classifier, newdata = test_set[-3])
cm = table(test_set[, 3], y_pred)
cm
y_pred = ifelse(pred_prob <= 1, 1, ifelse(pred_prob <= 2, 2),3)
y_pred = predict(classifier, newdata = test_set[-3])
cm = table(test_set[, 3], y_pred)
cm
y_pred = predict(classifier, newdata = test_set[-3])
y_pred
View(test_set)
View(training_set)
classifier = svm(formula = Customer_Segment ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
y_pred = predict(classifier, newdata = test_set[-3])
cm = table(test_set[, 3], y_pred)
cm
View(test_set)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid('PC1' = X1,
'PC2' = X2)
y_grid = predict(classifier, newdata = grid_set)
plot (set[, -3],
main = 'SVM (Training set)',
xlib = 'PC1',
ylib = 'PC2',
xlim = range(X1),
ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2), add = TRUE))
points(grid_set, pch = '.', col = ifelse(y_grid == 2, 'deepskyblue', ifelse(y_grid == 1, 'springgreen3', 'tomato')))
points(set, pch = 21, bg = ifelse(set[, 3] == 2, 'deepskyblue', ifelse(set[, 3] == 1, 'green4', 'red3')))
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid('PC1' = X1,
'PC2' = X2)
y_grid = predict(classifier, newdata = grid_set)
plot (set[, -3],
main = 'SVM (Test set)',
xlib = 'PC1',
ylib = 'PC2',
xlim = range(X1),
ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2), add = TRUE))
points(grid_set, pch = '.', col = ifelse(y_grid == 2, 'deepskyblue', ifelse(y_grid == 1, 'springgreen3', 'tomato')))
points(set, pch = 21, bg = ifelse(set[, 3] == 2, 'deepskyblue', ifelse(set[, 3] == 1, 'green4', 'red3')))
setwd("~/Desktop/Machine_Learning_Algorithms_R/Part 9 - Dimensionality Reduction/Section 38 - Linear Discriminant Analysis")
dataset = read.csv('Wine.csv')
library(caTools) #used for splitting the dataset
set.seed(123)
split = sample.split(dataset$Customer_Segment, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
training_set[-14] = scale(training_set[-14])
test_set[-14] = scale(test_set[-14])
library(MASS)
lda = lda(formula = Customer_Segment ~ .,
data = training_set)
training_set = as.data.frame(predict(lda, training_set))
View(training_set)
View(training_set)
View(training_set)
training_set = training_set[c(5,6,1)]
View(training_set)
test_set = as.data.frame(predict(lda, test_set))
test_set = test_set[c(5,6,1)]
classifier = svm(formula = class ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
# Fitting SVM to Training set
library(e1071)
classifier = svm(formula = class ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
setwd("~/Desktop/Machine_Learning_Algorithms_R/Part 9 - Dimensionality Reduction/Section 38 - Linear Discriminant Analysis")
View(classifier)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
y_pred
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
cm
View(test_set)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid('x.LD1' = X1,
'x.LD2' = X2)
y_grid = predict(classifier, newdata = grid_set)
plot (set[, -3],
main = 'SVM (Training set)',
xlib = 'x.LD1',
ylib = 'x.LD2',
xlim = range(X1),
ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2), add = TRUE))
points(grid_set, pch = '.', col = ifelse(y_grid == 2, 'deepskyblue', ifelse(y_grid == 1, 'springgreen3', 'tomato')))
points(set, pch = 21, bg = ifelse(set[, 3] == 2, 'deepskyblue', ifelse(set[, 3] == 1, 'green4', 'red3')))
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid('x.LD1' = X1,
'x.LD2' = X2)
y_grid = predict(classifier, newdata = grid_set)
plot (set[, -3],
main = 'SVM (Test set)',
xlib = 'x.LD1',
ylib = 'x.LD2',
xlim = range(X1),
ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2), add = TRUE))
points(grid_set, pch = '.', col = ifelse(y_grid == 2, 'deepskyblue', ifelse(y_grid == 1, 'springgreen3', 'tomato')))
points(set, pch = 21, bg = ifelse(set[, 3] == 2, 'deepskyblue', ifelse(set[, 3] == 1, 'green4', 'red3')))
setwd("~/Desktop/Machine_Learning_Algorithms_R/Part 9 - Dimensionality Reduction/Section 39 - Kernel Principal Component Analysis")
setwd("~/Desktop/Machine_Learning_Algorithms_R/Part 9 - Dimensionality Reduction/Section 39 - Kernel Principal Component Analysis")
setwd("~/Desktop/Machine_Learning_Algorithms_R/Part 9 - Dimensionality Reduction/Section 39 - Kernel Principal Component Analysis")
# Applying Kernel PCA
install.packages('kernlab')
library(kernlab)
# Kernel PCA
#Logistic Regression
#Data Preprocessing
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools) #used for splitting the dataset
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[, 1:2] = scale(training_set[, 1:2])
test_set[, 1:2] = scale(test_set[, 1:2])
k_pca = kpca(formula = ~ .,
data = training_set[-3],
kernel = 'rbfdot',
features = 2)
k_pca = kpca(formula = ~.,
data = training_set[-3],
kernel = 'rbfdot',
features = 2)
library(kernlab)
k_pca = kpca(formula = ~.,
data = training_set[-3],
kernel = 'rbfdot',
features = 2)
k_pca = kpca(x = ~.,
data = training_set[-3],
kernel = 'rbfdot',
features = 2)
View(k_pca)
View(training_set)
training_set_pca = as.data.frame(predict(k_pca, test_set))
View(training_set_pca)
training_set_pca$Purchased = training_set$Purchased
# Kernel PCA
#Logistic Regression
#Data Preprocessing
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools) #used for splitting the dataset
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[, 1:2] = scale(training_set[, 1:2])
test_set[, 1:2] = scale(test_set[, 1:2])
k_pca = kpca(x = ~.,
data = training_set[-3],
kernel = 'rbfdot',
features = 2)
training_set = predict(k_pca, training_set)
training_set_pca$Purchased = training_set$Purchased
View(training_set_pca)
View(training_set_pca)
View(training_set_pca)
View(training_set)
View(training_set_pca)
training_set = as.data.frame(predict(k_pca, training_set))
training_set_pca$Purchased = training_set$Purchased
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools) #used for splitting the dataset
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[, 1:2] = scale(training_set[, 1:2])
test_set[, 1:2] = scale(test_set[, 1:2])
k_pca = kpca(x = ~.,
data = training_set[-3],
kernel = 'rbfdot',
features = 2)
training_set = as.data.frame(predict(k_pca, training_set))
training_set_pca$Purchased = training_set$Purchased
View(training_set_pca)
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools) #used for splitting the dataset
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[, 1:2] = scale(training_set[, 1:2])
test_set[, 1:2] = scale(test_set[, 1:2])
k_pca = kpca(x = ~.,
data = training_set[-3],
kernel = 'rbfdot',
features = 2)
training_set_pca = as.data.frame(predict(k_pca, training_set))
training_set_pca$Purchased = training_set$Purchased
View(training_set_pca)
test_set_pca = as.data.frame(predict(k_pca, test_set))
test_set_pca$Purchased = test_set$Purchased
View(test_set_pca)
classifier = glm(formula = Purchased ~ .,
family = binomial,
data = training_set_pca)
# predicted probabilities vector
prob_pred = predict(classifier, type = 'response', newdata = test_set_pca[-3])
# predicted values vector
y_pred = ifelse(prob_pred > 0.5, 1, 0)
cm = table(test_set_pca[, 3], y_pred)
cm
accuracy = (57 + 26)/(10+7)
accuracy = (57 + 26)/(10+7+57+26)
View(test_set_pca)
set = training_set_pca
expand.grid('Age' = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01),
'EstimatedSalary' = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01))%>%
mutate(prob_set=predict(classifier, type = 'response', newdata = .),
y_grid = ifelse(prob_set > 0.5, 1, 0))%>%
ggplot()+
geom_point(aes(x=Age, y=EstimatedSalary, color=ifelse(y_grid == 1,y_grid-0.2, -y_grid-0.2)))+
geom_point(data=training_set, aes(x=Age, y=EstimatedSalary,colour=as.numeric(Purchased)+0.5))
# Visualising Training set results
library(dplyr)
set = training_set_pca
expand.grid('Age' = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01),
'EstimatedSalary' = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01))%>%
mutate(prob_set=predict(classifier, type = 'response', newdata = .),
y_grid = ifelse(prob_set > 0.5, 1, 0))%>%
ggplot()+
geom_point(aes(x=Age, y=EstimatedSalary, color=ifelse(y_grid == 1,y_grid-0.2, -y_grid-0.2)))+
geom_point(data=training_set, aes(x=Age, y=EstimatedSalary,colour=as.numeric(Purchased)+0.5))
set = training_set_pca
expand.grid('Age' = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01),
'EstimatedSalary' = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01))%>%
mutate(prob_set=predict(classifier, type = 'response', newdata = .),
y_grid = ifelse(prob_set > 0.5, 1, 0))%>%
ggplot()+
geom_point(aes(x=Age, y=EstimatedSalary, color=ifelse(y_grid == 1,y_grid-0.2, -y_grid-0.2)))+
geom_point(data=training_set_pca, aes(x=Age, y=EstimatedSalary,colour=as.numeric(Purchased)+0.5))
expand.grid('Age' = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01),
'EstimatedSalary' = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01))%>%
mutate(prob_set=predict(classifier, type = 'response', newdata = .),
y_grid = ifelse(prob_set > 0.5, 1, 0))%>%
ggplot()+
geom_point(aes(x=V1, y=V2, color=ifelse(y_grid == 1,y_grid-0.2, -y_grid-0.2)))+
geom_point(data=training_set_pca, aes(x=V1, y=V2,colour=as.numeric(Purchased)+0.5))
set = training_set_pca
expand.grid('V1' = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01),
'V2' = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01))%>%
mutate(prob_set=predict(classifier, type = 'response', newdata = .),
y_grid = ifelse(prob_set > 0.5, 1, 0))%>%
ggplot()+
geom_point(aes(x=V1, y=V2, color=ifelse(y_grid == 1,y_grid-0.2, -y_grid-0.2)))+
geom_point(data=training_set_pca, aes(x=V1, y=V2,colour=as.numeric(Purchased)+0.5))
library(ggplot2)
expand.grid('V1' = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01),
'V2' = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01))%>%
mutate(prob_set=predict(classifier, type = 'response', newdata = .),
y_grid = ifelse(prob_set > 0.5, 1, 0))%>%
ggplot()+
geom_point(aes(x=V1, y=V2, color=ifelse(y_grid == 1,y_grid-0.2, -y_grid-0.2)))+
geom_point(data=training_set_pca, aes(x=V1, y=V2,colour=as.numeric(Purchased)+0.5))
expand.grid('V1' = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01),
'V2' = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01))%>%
mutate(prob_set=predict(classifier, type = 'response', newdata = .),
y_grid = ifelse(prob_set > 0.5, 1, 0))%>%
ggplot()+
geom_point(aes(x=V1, y=V2, color=ifelse(y_grid == 1,y_grid-0.2, -y_grid-0.2)))+
geom_point(data=training_set_pca, aes(x=V1, y=V2,colour=as.numeric(Purchased)+0.5))
